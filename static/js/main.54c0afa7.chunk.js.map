{"version":3,"sources":["util.js","actions.js","Game.js","App.js","serviceWorker.js","index.js"],"names":["min","max","Math","floor","random","actions","graph","east","locked","Game","props","state","input","prevInput","currentRoom","visitedRooms","outputs","failedCommandCount","inventory","game","initialInventory","outputRef","React","createRef","inputRef","handleInput","bind","handleChange","detectSubmit","addOutput","getItemByID","resolveAlternateTriggers","this","current","focus","fillStores","obj","term","alternates","alternateTriggers","console","warn","i","length","alt","j","match","id","graphIndex","getGraphIndexByID","shelfID","node","push","back","west","rooms","title","description","messages","shelfDescription","shelfIndex","testCollection","catalogue","collections","replace","toLowerCase","collectionID","details","Title","Date","Description","dir","getMessage","items","item","examined","visibleItems","vi","searched","hiddenItems","hi","setState","prevState","e","target","value","key","keyCode","preventDefault","msg","outputEl","scrollTop","scrollHeight","word","synonyms","insertWord","message","util","s","command","words","toLocaleLowerCase","split","resolveSynonyms","log","verb","noun","currentNode","getNodeByID","itemExists","interactions","nextRoom","visited","canTake","addToInventory","list","map","name","searchDescription","outputItems","index","ps","p","className","ref","onKeyPress","onChange","onClick","Component","App","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mhvqSAAe,EACN,SAAUA,EAAKC,GAChB,OAAOC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,IAAMA,GCFvDK,EACe,SAAUC,GAEvB,OADAA,EAAM,GAAGC,KAAKC,QAAS,EAChBF,GCKMG,G,kBACjB,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTC,MAAO,GACPC,UAAW,GACXC,YAAa,SACbC,aAAc,GACdC,QAAS,GACTC,mBAAoB,EACpBC,UAAWC,EAAKC,kBAGpB,EAAKC,UAAYC,IAAMC,YACvB,EAAKC,SAAWF,IAAMC,YAEtB,EAAKE,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBACpB,EAAKE,aAAe,EAAKA,aAAaF,KAAlB,gBACpB,EAAKG,UAAY,EAAKA,UAAUH,KAAf,gBACjB,EAAKI,YAAc,EAAKA,YAAYJ,KAAjB,gBACnB,EAAKK,yBAA2B,EAAKA,yBAAyBL,KAA9B,gBApBjB,E,iFAwBfM,KAAKR,SAASS,QAAQC,QACtBF,KAAKG,e,+CAGgBC,EAAKC,GAC1B,IAAIC,EAAaF,EAAIG,kBACrB,GAAID,EAAY,CACZE,QAAQC,KAAK,+CACb,IAAK,IAAIC,EAAI,EAAGA,EAAIJ,EAAWK,OAAQD,IAEnC,IADA,IAAIE,EAAMN,EAAWI,GACZG,EAAI,EAAGA,EAAID,EAAIE,MAAMH,OAAQE,IAClC,GAAID,EAAIE,MAAMD,KAAOR,EACjB,OAAOO,EAAIP,KAKvB,OADAG,QAAQC,KAAK,mBACNJ,EAGP,OADAG,QAAQC,KAAK,qCACNJ,I,wCAIGU,GACd,IAAK,IAAIL,EAAI,EAAGA,EAAIvB,EAAKb,MAAMqC,OAAQD,IACnC,GAAIvB,EAAKb,MAAMoC,GAAGK,KAAOA,EACrB,OAAOL,EAGf,OAAO,O,mCAQP,IAHA,IACMM,EAAahB,KAAKiB,kBAAkB,UAEjCP,EAAI,EAAGA,EAHG,GAGaA,IAAK,CACjC,IAAIQ,EAAO,sBAAkBR,EAAI,GACjCvB,EAAKb,MAAM0C,GAAX,gBAAgCN,EAAI,IAAO,CAAES,KAAMD,GACnD/B,EAAKb,MAAM8C,KAAK,CACZL,GAAIG,EACJG,KAAM,CAAEF,KAAM,UACdG,KAAM,CAAEH,KAAM,eAElBhC,EAAKoC,MAAML,GAAW,CAClBH,GAAIG,EACJM,MAAM,SAAD,OAAWd,EAAI,GACpBe,YAAatC,EAAKuC,SAASC,iBAAiB,IAOhD,IALA,IACIC,EAAa5B,KAAKiB,kBAAkBC,GACpCW,EAAiBC,EAAUC,YAAY,GACvChB,EAAKc,EAAed,GAAGiB,QAAQ,IAAK,KAAKC,cACzCC,EAAehB,EAAU,IAAMH,EAC1BF,EAAI,EAAGA,EALM,GAKeA,IACjC1B,EAAKb,MAAMsD,GAAYb,GAAM,CAACI,KAAMe,GACpC/C,EAAKb,MAAM8C,KAAK,CACZL,GAAImB,EACJb,KAAM,CAACF,KAAMD,KAEjB/B,EAAKoC,MAAMW,GAAgB,CACvBnB,GAAImB,EACJV,MAAOT,EACPU,YAAY,2BAAD,OAA6BI,EAAeM,QAAQC,MAApD,aAA8DP,EAAeM,QAAQE,KAArF,cAA+FR,EAAeM,QAAQG,cAI7I9B,QAAQ+B,IAAIpD,EAAKb,OACjB0B,KAAKH,UAAUG,KAAKwC,WAAW,SAC/BxC,KAAKH,UAAUG,KAAKwC,WAAW,W,kCAGvBzB,GACR,IAAK,IAAIL,EAAI,EAAGA,EAAIvB,EAAKb,MAAMqC,OAAQD,IACnC,GAAIvB,EAAKb,MAAMoC,GAAGK,KAAOA,EAAM,OAAO5B,EAAKb,MAAMoC,GAErDF,QAAQC,KAAR,uCAA4CM,EAA5C,Q,kCAGQA,GACRA,EAAKf,KAAKD,yBAAyBZ,EAAKoC,MAAMvB,KAAKrB,MAAMG,aAAciC,GACvE,IAAK,IAAIL,EAAI,EAAGA,EAAIvB,EAAKoC,MAAMvB,KAAKrB,MAAMG,aAAa2D,MAAM9B,OAAQD,IAAK,CACtE,IAAIgC,EAAOvD,EAAKoC,MAAMvB,KAAKrB,MAAMG,aAAa2D,MAAM/B,GACpD,GAAIgC,EAAK3B,KAAOA,EAEZ,OADA5B,EAAKoC,MAAMvB,KAAKrB,MAAMG,aAAa2D,MAAM/B,GAAGiC,UAAW,EAChDD,EAEX,GAAIA,EAAKC,UAAYD,EAAKE,aACtB,IAAK,IAAI/B,EAAI,EAAGA,EAAI6B,EAAKE,aAAajC,OAAQE,IAAK,CAC/C,IAAIgC,EAAKH,EAAKE,aAAa/B,GAC3B,GAAIgC,EAAG9B,KAAOA,EACV,OAAO8B,EAInB,GAAIH,EAAKI,UAAYJ,EAAKK,YACtB,IAAK,IAAIlC,EAAI,EAAGA,EAAI6B,EAAKK,YAAYpC,OAAQE,IAAK,CAC9C,IAAImC,EAAKN,EAAKK,YAAYlC,GAC1B,GAAImC,EAAGjC,KAAOA,EACV,OAAOiC,GAKvB,IAAK,IAAItC,EAAI,EAAGA,EAAIV,KAAKrB,MAAMO,UAAUyB,OAAQD,IAC7C,GAAIV,KAAKrB,MAAMO,UAAUwB,GAAGK,KAAOA,EAC/B,OAAOf,KAAKrB,MAAMO,UAAUwB,GAIpC,OAAO,I,qCAGIgC,GACX1C,KAAKiD,UAAS,SAAUC,GAEpB,OADAA,EAAUhE,UAAUkC,KAAKsB,GAClBQ,O,mCAGFC,GACTnD,KAAKiD,SAAS,CACVrE,MAAOuE,EAAEC,OAAOC,U,mCAIXF,GACK,UAAVA,EAAEG,KACFtD,KAAKP,cAES,KAAd0D,EAAEI,UACFvD,KAAKiD,SAAS,CAAErE,MAAOoB,KAAKrB,MAAME,YAClCsE,EAAEK,oB,gCAIAC,GAAM,IAAD,OACXzD,KAAKiD,UAAS,SAAUC,GAEpB,OADAA,EAAUlE,QAAQoC,KAAKqC,GAChBP,KACR,WACC,IAAIQ,EAAW,EAAKrE,UAAUY,QAC9ByD,EAASC,UAAYD,EAASE,kB,sCAItBC,GACZ,IAAK,IAAInD,EAAI,EAAGA,EAAIvB,EAAK2E,SAASnD,OAAQD,IACtC,IAAK,IAAIG,EAAI,EAAGA,EAAI1B,EAAK2E,SAASpD,GAAGI,MAAMH,OAAQE,IAC/C,GAAI1B,EAAK2E,SAASpD,GAAGI,MAAMD,KAAOgD,EAC9B,OAAO1E,EAAK2E,SAASpD,GAAGL,KAIpC,OAAOwD,I,iCAGAJ,GAAuB,IAAlBM,EAAiB,uDAAJ,GACzB,GAAI5E,EAAKuC,SAAS+B,GAAM,CACpB,IAAIO,EAAU7E,EAAKuC,SAAS+B,GAAKQ,EAAS,EAAG9E,EAAKuC,SAAS+B,GAAK9C,OAAS,IAEzE,OADAqD,EAAUA,EAAQhC,QAAQ,IAAK+B,M,oCAMnC/D,KAAKiD,SAAS,CAAEpE,UAAWmB,KAAKrB,MAAMC,QAOtC,IANA,IAAIsF,EAAIlE,KAAKrB,MAAMC,MAAMoD,QAAQ,MAAO,IAIpCmC,EAAU,GACVC,GAFJF,GADAA,GADAA,EAAIA,EAAElC,QAAQ,WAAY,KACpBA,QAAQ,MAAO,KACfqC,qBAEQC,MAAM,KACX5D,EAAI,EAAGA,EAAI0D,EAAMzD,OAAQD,IAC9ByD,EAAQ/C,KAAKpB,KAAKuE,gBAAgBH,EAAM1D,KAE5CF,QAAQgE,IAAIL,GACZ3D,QAAQgE,IAAIrF,GACZ,IAAIsF,EAAON,EAAQ,GACfO,EAAOP,EAAQ,GACfQ,EAAc3E,KAAK4E,YAAY5E,KAAKrB,MAAMG,aAO9C,GALAkB,KAAKiD,UAAS,SAAUC,GAEpB,OADAA,EAAUlE,QAAQoC,KAAK,KAAOpB,KAAKrB,MAAMC,OAClCsE,KAEXlD,KAAKiD,SAAS,CAAErE,MAAO,KACA,IAAnBuF,EAAQxD,OAER,GAAa,WADb+D,EAAO1E,KAAKuE,gBAAgBJ,EAAQ,MACH,UAATO,GAA6B,SAATA,GAA4B,SAATA,GAA4B,SAATA,EAC9ED,EAAO,UACJ,GAAa,cAATC,EACPD,EAAO,cAEN,IAAa,SAATC,EAEL,YADA1E,KAAKH,UAAUG,KAAKwC,WAAW,SAGjB,YAATkC,GACLD,EAAO,UACPC,EAAO,UAEO,OAATA,EACL1E,KAAKH,UAAUG,KAAKwC,WAAW,gBACxBxC,KAAKF,YAAY4E,KACxBD,EAAO,WAGf,GAAa,QAATA,EAAgB,CAChBjE,QAAQgE,IAAI,eACZ,IAAIK,EAAa7E,KAAKF,YAAY4E,GAElC,GADAlE,QAAQgE,IAAIK,GACQ,SAAfV,EAAQ,IAAgC,OAAfA,EAAQ,KAAgBU,EAe/C,OAAIA,OACP7E,KAAKH,UAAUG,KAAKwC,WAAW,aAAc2B,EAAQ,UAGrDnE,KAAKH,UAAUG,KAAKwC,WAAW,gBAlB/B,IAAIY,EAASpD,KAAKF,YAAYqE,EAAQ,IAEtC,OADAf,EAASpD,KAAKuE,gBAAgBnB,KAChBA,EAAO0B,cAAgB1B,EAAO0B,aAAaJ,IACrD1E,KAAKH,UAAUuD,EAAO0B,aAAaJ,GAAMV,cAEzC7E,EAAKb,MAAQD,EAAwBc,EAAKb,SAEnC8E,OACPpD,KAAKH,UAAUG,KAAKwC,WAAW,uBAG/BxC,KAAKH,UAAUG,KAAKwC,WAAW,gBAW3C,GAAa,OAATiC,EAaA,GATa,WAFbC,EAAO1E,KAAKD,yBAAyB4E,EAAaD,MAG1CP,EAAQ,GACRO,EAAI,gBAAYP,EAAQ,KAExBO,EAAI,UACJ1E,KAAKH,UAAU,sCAInB8E,EAAYD,KAAsC,IAA7BC,EAAYD,GAAMlG,OAAiB,CACxD,IAAIuG,EAAWJ,EAAYD,GAAMvD,KACjCnB,KAAKiD,UAAS,SAAUC,GAEpB,OADAA,EAAUpE,YAAciG,EACjB7B,KAEN/D,EAAKoC,MAAMwD,GAAUC,SAGkB,IAAjC7F,EAAKoC,MAAMwD,GAAUC,SAC5BhF,KAAKH,UAAUV,EAAKoC,MAAMwD,GAAUvD,QAHpCxB,KAAKH,UAAL,UAAkBV,EAAKoC,MAAMwD,GAAUvD,MAAvC,aAAiDrC,EAAKoC,MAAMwD,GAAUtD,cACtEtC,EAAKoC,MAAMwD,GAAUC,SAAU,QAI5BL,EAAYD,KAAsC,IAA7BC,EAAYD,GAAMlG,OAC9CwB,KAAKH,UAAUG,KAAKwC,WAAW,WAG/BxC,KAAKH,UAAUG,KAAKwC,WAAW,uBAEhC,GAAa,SAATiC,EAAiB,CACxB,IAAI/B,EAAO1C,KAAKF,YAAY4E,GACxBhC,GAAQA,EAAKuC,SACbjF,KAAKH,UAAU,UACfG,KAAKkF,eAAexC,IACbA,IAASA,EAAKuC,QACrBjF,KAAKH,UAAUG,KAAKwC,WAAW,iBACvBE,GACR1C,KAAKH,UAAUG,KAAKwC,WAAW,qBAEhC,GAAa,YAATiC,EACP,GAAa,cAATC,EAAsB,CACtB,IAAIS,EAAOnF,KAAKrB,MAAMO,UAAUkG,KAAI,SAAU1C,GAC1C,MAAM,UAAN,OAAYA,EAAK2C,SAErB,GAAIF,EAAKxE,OAAS,EAAG,CACjBX,KAAKH,UAAL,qBACA,IAAIqE,EAAI,GACR,IAAK,IAAMxB,KAAQyC,EACfjB,GAAC,UAAOiB,EAAKzC,GAAZ,MAEL1C,KAAKH,UAAUqE,QAEflE,KAAKH,UAAL,uCAED,GAAa,WAAT6E,EACP1E,KAAKH,UAAL,UAAkBV,EAAKoC,MAAMvB,KAAKrB,MAAMG,aAAa0C,MAArD,aAA+DrC,EAAKoC,MAAMvB,KAAKrB,MAAMG,aAAa2C,kBAC/F,CACH,IAAIiB,EAAO1C,KAAKF,YAAY4E,GACxBhC,EACA1C,KAAKH,UAAU6C,EAAKjB,aAEpBzB,KAAKH,UAAUG,KAAKwC,WAAW,qBAGpC,GAAa,WAATiC,EAAmB,CAC1B,IAAI/B,EAAO1C,KAAKF,YAAY4E,GACxBhC,EACIA,EAAKK,aACLL,EAAKI,UAAW,EAChB9C,KAAKH,UAAU6C,EAAK4C,qBAEpB5C,EAAKI,UAAW,EAChB9C,KAAKH,UAAUG,KAAKwC,WAAW,kBAGnCxC,KAAKH,UAAUG,KAAKwC,WAAW,qBAGnCxC,KAAKiD,UAAS,SAAUC,GAEpB,OADAA,EAAUjE,qBACHiE,KAEPlD,KAAKrB,MAAMM,mBAAqB,GAChCe,KAAKH,UAAUG,KAAKwC,WAAW,SAC/BxC,KAAKiD,SAAS,CAAEhE,mBAAoB,KAEpCe,KAAKH,UAAUG,KAAKwC,WAAW,sB,+BASvC,IAAM+C,EAAcvF,KAAKrB,MAAMK,QAAQoG,KAAI,SAAU3B,EAAK+B,GACtD,IACMC,EADWhC,EAAIa,MAAM,MACLc,KAAI,SAAUM,EAAGF,GACnC,OAAO,2BAAIE,MAEf,OAAO,wBAAIpC,IAAKkC,GAAQC,MAG5B,OACI,yBAAKE,UAAU,QACX,yBAAKA,UAAU,gBAAgBxG,EAAKoC,MAAMvB,KAAKrB,MAAMG,aAAa0C,OAClE,yBAAKmE,UAAU,eAAeC,IAAK5F,KAAKX,WACpC,4BACKkG,IAGT,yBAAKI,UAAU,kBACX,2BAAOC,IAAK5F,KAAKR,SAAUqG,WAAY7F,KAAKJ,aAAcyD,MAAOrD,KAAKrB,MAAMC,MAAOkH,SAAU9F,KAAKL,aAAcgG,UAAU,oBAC1H,4BAAQI,QAAS/F,KAAKP,YAAakG,UAAU,oBAA7C,e,GAxXcrG,IAAM0G,Y,MCIzBC,MARf,WACE,OACE,yBAAKN,UAAU,OACb,kBAAC,EAAD,QCKcO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASvF,MACvB,2DCbNwF,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.54c0afa7.chunk.js","sourcesContent":["export default {\r\n    gri: function (min, max) {\r\n        return Math.floor(Math.random() * (max - min + 1)) + min;\r\n    }\r\n}","const actions = {\r\n    unlockStoreDoor: function (graph) {\r\n        graph[1].east.locked = false;\r\n        return graph;\r\n    }\r\n}\r\n\r\nexport {actions}","import React from 'react'\r\nimport game from './game.json'\r\nimport catalogue from './catalogue.json'\r\nimport util from './util.js'\r\nimport { actions } from './actions.js'\r\n// import Map from './Map.js'\r\nimport './Game.css'\r\n\r\nexport default class Game extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            input: '',\r\n            prevInput: '',\r\n            currentRoom: 'store1',\r\n            visitedRooms: [],\r\n            outputs: [],\r\n            failedCommandCount: 0,\r\n            inventory: game.initialInventory\r\n        }\r\n\r\n        this.outputRef = React.createRef()\r\n        this.inputRef = React.createRef()\r\n\r\n        this.handleInput = this.handleInput.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.detectSubmit = this.detectSubmit.bind(this)\r\n        this.addOutput = this.addOutput.bind(this)\r\n        this.getItemByID = this.getItemByID.bind(this)\r\n        this.resolveAlternateTriggers = this.resolveAlternateTriggers.bind(this)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.inputRef.current.focus();\r\n        this.fillStores()\r\n    }\r\n\r\n    resolveAlternateTriggers(obj, term) {\r\n        let alternates = obj.alternateTriggers;\r\n        if (alternates) {\r\n            console.warn('Object has alternate triggers, searching...')\r\n            for (let i = 0; i < alternates.length; i++) {\r\n                let alt = alternates[i];\r\n                for (let j = 0; j < alt.match.length; j++) {\r\n                    if (alt.match[j] === term) {\r\n                        return alt.term;\r\n                    }\r\n                }\r\n            }\r\n            console.warn('No match found.')\r\n            return term;\r\n        } else {\r\n            console.warn('Object has no alternate triggers.')\r\n            return term;\r\n        }\r\n    }\r\n\r\n    getGraphIndexByID(id) {\r\n        for (let i = 0; i < game.graph.length; i++) {\r\n            if (game.graph[i].id === id) {\r\n                return i;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n\r\n    fillStores() {\r\n        const shelfCount = 10;\r\n        const graphIndex = this.getGraphIndexByID('store1')\r\n\r\n        for (let i = 0; i < shelfCount; i++) {\r\n            let shelfID = `store1-shelf${i + 1}`;\r\n            game.graph[graphIndex][`shelf-${i + 1}`] = { node: shelfID }\r\n            game.graph.push({\r\n                id: shelfID,\r\n                back: { node: 'store1' },\r\n                west: { node: 'corridor1' }\r\n            })\r\n            game.rooms[shelfID] = {\r\n                id: shelfID,\r\n                title: `Shelf ${i + 1}`,\r\n                description: game.messages.shelfDescription[0],\r\n            }\r\n            let collectionCount = 10;\r\n            let shelfIndex = this.getGraphIndexByID(shelfID)\r\n            let testCollection = catalogue.collections[0];\r\n            let id = testCollection.id.replace(' ', '-').toLowerCase()\r\n            let collectionID = shelfID + '-' + id\r\n            for (let j = 0; j < collectionCount; j++) {\r\n                game.graph[shelfIndex][id] = {node: collectionID}\r\n                game.graph.push({\r\n                    id: collectionID,\r\n                    back: {node: shelfID}\r\n                })\r\n                game.rooms[collectionID] = {\r\n                    id: collectionID,\r\n                    title: id,\r\n                    description: `The filing card reads:/n${testCollection.details.Title} (${testCollection.details.Date})/n${testCollection.details.Description}`\r\n                }\r\n            }\r\n        }\r\n        console.dir(game.graph)\r\n        this.addOutput(this.getMessage('init'))\r\n        this.addOutput(this.getMessage('help'))\r\n    }\r\n\r\n    getNodeByID(id) {\r\n        for (let i = 0; i < game.graph.length; i++) {\r\n            if (game.graph[i].id === id) { return game.graph[i] }\r\n        }\r\n        console.warn(`Couldn't find node with ID \"${id}\"`)\r\n    }\r\n\r\n    getItemByID(id) {\r\n        id = this.resolveAlternateTriggers(game.rooms[this.state.currentRoom], id)\r\n        for (let i = 0; i < game.rooms[this.state.currentRoom].items.length; i++) {\r\n            let item = game.rooms[this.state.currentRoom].items[i];\r\n            if (item.id === id) {\r\n                game.rooms[this.state.currentRoom].items[i].examined = true;\r\n                return item\r\n            }\r\n            if (item.examined && item.visibleItems) {\r\n                for (let j = 0; j < item.visibleItems.length; j++) {\r\n                    let vi = item.visibleItems[j];\r\n                    if (vi.id === id) {\r\n                        return vi;\r\n                    }\r\n                }\r\n            }\r\n            if (item.searched && item.hiddenItems) {\r\n                for (let j = 0; j < item.hiddenItems.length; j++) {\r\n                    let hi = item.hiddenItems[j];\r\n                    if (hi.id === id) {\r\n                        return hi;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        for (let i = 0; i < this.state.inventory.length; i++) {\r\n            if (this.state.inventory[i].id === id) {\r\n                return this.state.inventory[i]\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    addToInventory(item) {\r\n        this.setState(function (prevState) {\r\n            prevState.inventory.push(item);\r\n            return prevState\r\n        })\r\n    }\r\n    handleChange(e) {\r\n        this.setState({\r\n            input: e.target.value\r\n        })\r\n    }\r\n\r\n    detectSubmit(e) {\r\n        if (e.key === 'Enter') {\r\n            this.handleInput()\r\n        }\r\n        if (e.keyCode === 38) {\r\n            this.setState({ input: this.state.prevInput })\r\n            e.preventDefault()\r\n        }\r\n    }\r\n\r\n    addOutput(msg) {\r\n        this.setState(function (prevState) {\r\n            prevState.outputs.push(msg);\r\n            return prevState;\r\n        }, () => {\r\n            let outputEl = this.outputRef.current;\r\n            outputEl.scrollTop = outputEl.scrollHeight;\r\n        })\r\n    }\r\n\r\n    resolveSynonyms(word) {\r\n        for (let i = 0; i < game.synonyms.length; i++) {\r\n            for (let j = 0; j < game.synonyms[i].match.length; j++) {\r\n                if (game.synonyms[i].match[j] === word) {\r\n                    return game.synonyms[i].term;\r\n                }\r\n            }\r\n        }\r\n        return word;\r\n    }\r\n\r\n    getMessage(msg, insertWord = '') {\r\n        if (game.messages[msg]) {\r\n            let message = game.messages[msg][util.gri(0, game.messages[msg].length - 1)]\r\n            message = message.replace('%', insertWord)\r\n            return message\r\n        }\r\n    }\r\n\r\n    handleInput() {\r\n        this.setState({ prevInput: this.state.input })\r\n        let s = this.state.input.replace('at ', '')\r\n        s = s.replace('through ', '')\r\n        s = s.replace('to ', '')\r\n        s = s.toLocaleLowerCase()\r\n        let command = []\r\n        let words = s.split(' ');\r\n        for (let i = 0; i < words.length; i++) {\r\n            command.push(this.resolveSynonyms(words[i]))\r\n        }\r\n        console.log(command)\r\n        console.log(game)\r\n        let verb = command[0];\r\n        let noun = command[1];\r\n        let currentNode = this.getNodeByID(this.state.currentRoom);\r\n\r\n        this.setState(function (prevState) {\r\n            prevState.outputs.push('> ' + this.state.input);\r\n            return prevState;\r\n        })\r\n        this.setState({ input: '' })\r\n        if (command.length === 1) {\r\n            noun = this.resolveSynonyms(command[0])\r\n            if (noun === 'north' || noun === 'south' || noun === 'east' || noun === 'west' || noun === 'back') {\r\n                verb = 'go'\r\n            } else if (noun === 'inventory') {\r\n                verb = 'examine'\r\n            }\r\n            else if (noun === 'help') {\r\n                this.addOutput(this.getMessage('help'))\r\n                return;\r\n            }\r\n            else if (noun === 'examine') {\r\n                verb = 'examine';\r\n                noun = 'around';\r\n            }\r\n            else if (noun === 'go') {\r\n                this.addOutput(this.getMessage('giveCompass'))\r\n            } else if (this.getItemByID(noun)) {\r\n                verb = 'examine'\r\n            }\r\n        }\r\n        if (verb === 'use') {\r\n            console.log('In use flow')\r\n            let itemExists = this.getItemByID(noun)\r\n            console.log(itemExists)\r\n            if ((command[2] === 'with' || command[2] === 'on') && itemExists) {\r\n                let target = this.getItemByID(command[3]);\r\n                target = this.resolveSynonyms(target)\r\n                if (target && target.interactions && target.interactions[noun]) {\r\n                    this.addOutput(target.interactions[noun].message);\r\n                    //TODO: Make this dynamicly controlled from game.json\r\n                    game.graph = actions.unlockStoreDoor(game.graph);\r\n                    return;\r\n                } else if (target) {\r\n                    this.addOutput(this.getMessage('itemDidntWork'))\r\n                    return;\r\n                } else {\r\n                    this.addOutput(this.getMessage('noSuchThing'))\r\n                    return;\r\n                }\r\n            } else if (itemExists) {\r\n                this.addOutput(this.getMessage('giveTarget', command[1]))\r\n                return;\r\n            } else {\r\n                this.addOutput(this.getMessage('noSuchThing'))\r\n                return;\r\n            }\r\n        }\r\n        if (verb === 'go') {\r\n            // noun is a direction here\r\n            noun = this.resolveAlternateTriggers(currentNode, noun)\r\n\r\n            if (noun === 'shelf') {\r\n                if (command[2]) {\r\n                    noun = `shelf-${command[2]}`\r\n                } else {\r\n                    noun = `shelf-1`\r\n                    this.addOutput('(you walk up to the first shelf)')\r\n                }\r\n            }\r\n\r\n            if (currentNode[noun] && currentNode[noun].locked !== true) {\r\n                let nextRoom = currentNode[noun].node;\r\n                this.setState(function (prevState) {\r\n                    prevState.currentRoom = nextRoom;\r\n                    return prevState;\r\n                })\r\n                if (!game.rooms[nextRoom].visited) {\r\n                    this.addOutput(`${game.rooms[nextRoom].title}/n${game.rooms[nextRoom].description}`)\r\n                    game.rooms[nextRoom].visited = true;\r\n                } else if (game.rooms[nextRoom].visited === true) {\r\n                    this.addOutput(game.rooms[nextRoom].title)\r\n                }\r\n            } else if (currentNode[noun] && currentNode[noun].locked === true) {\r\n                this.addOutput(this.getMessage('locked'))\r\n            }\r\n            else {\r\n                this.addOutput(this.getMessage('cantGoThatWay'))\r\n            }\r\n        } else if (verb === 'take') {\r\n            let item = this.getItemByID(noun);\r\n            if (item && item.canTake) {\r\n                this.addOutput('Taken.')\r\n                this.addToInventory(item)\r\n            } else if (item && !item.canTake) {\r\n                this.addOutput(this.getMessage('cantTakeThat'))\r\n            } else if (!item) {\r\n                this.addOutput(this.getMessage('noSuchThing'))\r\n            }\r\n        } else if (verb === 'examine') {\r\n            if (noun === 'inventory') {\r\n                let list = this.state.inventory.map(function (item) {\r\n                    return `— ${item.name}`\r\n                })\r\n                if (list.length > 0) {\r\n                    this.addOutput(`You are carrying:`)\r\n                    let s = '';\r\n                    for (const item in list) {\r\n                        s += `${list[item]}/n`\r\n                    }\r\n                    this.addOutput(s)\r\n                } else {\r\n                    this.addOutput(`Your're not carrying anything.`)\r\n                }\r\n            } else if (noun === 'around') {\r\n                this.addOutput(`${game.rooms[this.state.currentRoom].title}/n${game.rooms[this.state.currentRoom].description}`)\r\n            } else {\r\n                let item = this.getItemByID(noun)\r\n                if (item) {\r\n                    this.addOutput(item.description)\r\n                } else {\r\n                    this.addOutput(this.getMessage('noSuchThing'))\r\n                }\r\n            }\r\n        } else if (verb === 'search') {\r\n            let item = this.getItemByID(noun)\r\n            if (item) {\r\n                if (item.hiddenItems) {\r\n                    item.searched = true;\r\n                    this.addOutput(item.searchDescription);\r\n                } else {\r\n                    item.searched = true;\r\n                    this.addOutput(this.getMessage('searchFailed'))\r\n                }\r\n            } else {\r\n                this.addOutput(this.getMessage('noSuchThing'))\r\n            }\r\n        } else {\r\n            this.setState(function (prevState) {\r\n                prevState.failedCommandCount++\r\n                return prevState;\r\n            })\r\n            if (this.state.failedCommandCount > 2) {\r\n                this.addOutput(this.getMessage('hint'))\r\n                this.setState({ failedCommandCount: 0 })\r\n            } else {\r\n                this.addOutput(this.getMessage('didntUnderstand'))\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        const outputItems = this.state.outputs.map(function (msg, index) {\r\n            let paragraphs = msg.split('/n');\r\n            const ps = paragraphs.map(function (p, index) {\r\n                return <p>{p}</p>\r\n            })\r\n            return <li key={index}>{ps}</li>\r\n        });\r\n\r\n        return (\r\n            <div className='game'>\r\n                <div className=\"game--status\">{game.rooms[this.state.currentRoom].title}</div>\r\n                <div className='game--output' ref={this.outputRef}>\r\n                    <ul>\r\n                        {outputItems}\r\n                    </ul>\r\n                </div>\r\n                <div className='game--controls'>\r\n                    <input ref={this.inputRef} onKeyPress={this.detectSubmit} value={this.state.input} onChange={this.handleChange} className='controls--field'></input>\r\n                    <button onClick={this.handleInput} className='controls--button'>Enter</button>\r\n                </div>\r\n                {/* <Map graph={game.graph}></Map> */}\r\n            </div>\r\n\r\n        )\r\n    }\r\n\r\n}","import React from 'react';\nimport Game from './Game.js';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Game></Game>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}