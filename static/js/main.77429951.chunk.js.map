{"version":3,"sources":["util.js","actions.js","Game.js","App.js","serviceWorker.js","index.js"],"names":["min","max","Math","floor","random","id","replace","toLowerCase","arr","key","length","s","i","actions","graph","east","locked","Game","props","state","input","prevInput","moves","currentRoom","visitedRooms","outputs","failedCommandCount","inventory","game","initialInventory","outputRef","React","createRef","inputRef","handleInput","bind","handleChange","detectSubmit","addOutput","getItemByID","resolveAlternateTriggers","isDirectionValid","room","this","current","focus","fillStores","rooms","Object","prototype","hasOwnProperty","call","items","obj","term","alternates","alternateTriggers","console","warn","alt","j","match","graphIndex","getGraphIndexByID","shelfID","node","push","back","west","title","shelfIndex","ids","thisCollection","catalogue","collections","util","collectionID","childrenIds","thisCollectionChildren","children","a","c","itemId","collectionIndex","description","JSON","stringify","details","Title","Date","join","messages","shelfDescription","getMessage","item","examined","visibleItems","vi","searched","hiddenItems","hi","setState","prevState","log","splice","e","target","value","keyCode","preventDefault","msg","outputEl","scrollTo","top","scrollHeight","behavior","word","synonyms","d","includes","insertWord","message","direction","getNodeByID","toLocaleLowerCase","command","words","split","resolveSynonyms","verb","noun","currentNode","window","location","reload","itemExists","interactions","nextRoom","visited","canTake","removeItemFromRoom","addToInventory","list","map","name","resolveDescription","searchDescription","outputItems","index","ps","p","className","ref","onKeyPress","onChange","onClick","Component","App","Boolean","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.77429951.chunk.js","sourcesContent":["export default {\r\n    gri: function (min, max) {\r\n        return Math.floor(Math.random() * (max - min + 1)) + min;\r\n    },\r\n    sanitiseID: function (id) {\r\n        return id.replace(' ', '-').toLowerCase()\r\n    },\r\n\r\n    joinEnglish: function (arr, key = false) {\r\n        if (arr.length === 1) {\r\n            if (key){\r\n                return arr[0][key];\r\n            } else {\r\n                return arr[0];\r\n            }\r\n        } else if (arr.length === 2) {\r\n            if (key){\r\n                return `${arr[0][key]} and ${arr[1][key]}`;\r\n            } else {\r\n                return `${arr[0]} and ${arr[1]}`;\r\n            }\r\n        } else {\r\n            let s = '';\r\n            for (let i = 0; i < arr.length - 1; i++) {\r\n                if (key){\r\n                    s += `${arr[i][key]}, `\r\n                } else {\r\n                    s += `${arr[i]}, `\r\n                }\r\n            }\r\n            if (key){\r\n                s += `and ${arr[arr.length - 1][key]}`\r\n            } else {\r\n                s += `and ${arr[arr.length - 1]}`\r\n            }\r\n            return s;\r\n        }\r\n    }\r\n}","const actions = {\r\n    unlockStoreDoor: function (graph) {\r\n        graph[1].east.locked = false;\r\n        return graph;\r\n    }\r\n}\r\n\r\nexport {actions}","import React from 'react'\r\nimport game from './game.json'\r\nimport catalogue from './catalogue.json'\r\nimport util from './util.js'\r\nimport { actions } from './actions.js'\r\n// import Map from './Map.js'\r\nimport './Game.css'\r\n\r\nexport default class Game extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            input: '',\r\n            prevInput: '',\r\n            moves: 0,\r\n            currentRoom: 'store1',\r\n            visitedRooms: [],\r\n            outputs: [],\r\n            failedCommandCount: 0,\r\n            inventory: game.initialInventory\r\n        }\r\n\r\n        this.outputRef = React.createRef()\r\n        this.inputRef = React.createRef()\r\n\r\n        this.handleInput = this.handleInput.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.detectSubmit = this.detectSubmit.bind(this)\r\n        this.addOutput = this.addOutput.bind(this)\r\n        this.getItemByID = this.getItemByID.bind(this)\r\n        this.resolveAlternateTriggers = this.resolveAlternateTriggers.bind(this);\r\n        this.isDirectionValid = this.isDirectionValid.bind(this)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.inputRef.current.focus();\r\n        this.fillStores()\r\n        for (let room in game.rooms) {\r\n            if (Object.prototype.hasOwnProperty.call(game.rooms, room)) {\r\n                if (!game.rooms[room].items) {\r\n                    game.rooms[room].items = []\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    resolveAlternateTriggers(obj, term) {\r\n        let alternates = obj.alternateTriggers;\r\n        if (alternates) {\r\n            console.warn('Object has alternate triggers, searching...')\r\n            for (let i = 0; i < alternates.length; i++) {\r\n                let alt = alternates[i];\r\n                for (let j = 0; j < alt.match.length; j++) {\r\n                    if (alt.match[j] === term) {\r\n                        return alt.term;\r\n                    }\r\n                }\r\n            }\r\n            console.warn('No match found.')\r\n            return term;\r\n        } else {\r\n            console.warn('Object has no alternate triggers.')\r\n            return term;\r\n        }\r\n    }\r\n\r\n    getGraphIndexByID(id) {\r\n        for (let i = 0; i < game.graph.length; i++) {\r\n            if (game.graph[i].id === id) {\r\n                return i;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n\r\n    fillStores() {\r\n        const shelfCount = 10;\r\n        const graphIndex = this.getGraphIndexByID('store1')\r\n\r\n        for (let i = 0; i < shelfCount; i++) {\r\n            let shelfID = `store1-shelf${i + 1}`;\r\n            game.graph[graphIndex][`shelf-${i + 1}`] = { node: shelfID }\r\n            game.graph.push({\r\n                id: shelfID,\r\n                back: { node: 'store1' },\r\n                west: { node: 'corridor1' }\r\n            })\r\n            game.rooms[shelfID] = {\r\n                id: shelfID,\r\n                title: `Shelf ${i + 1}`,\r\n            }\r\n            let collectionCount = 10;\r\n            let shelfIndex = this.getGraphIndexByID(shelfID)\r\n            let ids = []\r\n            for (let j = 0; j < collectionCount; j++) {\r\n                let thisCollection = catalogue.collections[util.gri(0, 200)];\r\n                let id = util.sanitiseID(thisCollection.id)\r\n                let collectionID = shelfID + '-' + id\r\n                ids.push(id);\r\n\r\n                game.graph[shelfIndex][id] = { node: collectionID }\r\n                game.graph.push({\r\n                    id: collectionID,\r\n                    back: { node: shelfID }\r\n                })\r\n\r\n                let childrenIds = []\r\n                let thisCollectionChildren = thisCollection.children;\r\n                for (let a = 0; a < thisCollectionChildren.length; a++) {\r\n                    let c = thisCollectionChildren[a];\r\n                    if (c.id) {\r\n                        let itemId = util.sanitiseID(c.id);\r\n                        childrenIds.push(itemId)\r\n                        let collectionIndex = this.getGraphIndexByID(collectionID)\r\n                        game.graph[collectionIndex][itemId] = { node: itemId }\r\n                        game.graph.push({\r\n                            id: itemId,\r\n                            back: { node: collectionID }\r\n                        })\r\n                        game.rooms[itemId] = {\r\n                            id: itemId,\r\n                            title: `${itemId}`,\r\n                            description: `${JSON.stringify(c)}`\r\n                        }\r\n                    }\r\n                }\r\n                game.rooms[collectionID] = {\r\n                    id: collectionID,\r\n                    title: id,\r\n                    description: `The filing card reads:/n${thisCollection.details.Title} (${thisCollection.details.Date})./n Items contained within:/n ${childrenIds.join('/n')}`\r\n                }\r\n            }\r\n\r\n            game.rooms[shelfID].description = `${game.messages.shelfDescription[0]} According to the label affixed to the side, it contains the following collections:/n ${ids.join('/n')}`;\r\n        }\r\n        this.addOutput(this.getMessage('init'))\r\n    }\r\n\r\n    getNodeByID(id) {\r\n        for (let i = 0; i < game.graph.length; i++) {\r\n            if (game.graph[i].id === id) { return game.graph[i] }\r\n        }\r\n        console.warn(`Couldn't find node with ID \"${id}\"`)\r\n    }\r\n\r\n    getItemByID(id) {\r\n        id = this.resolveAlternateTriggers(game.rooms[this.state.currentRoom], id)\r\n        for (let i = 0; i < game.rooms[this.state.currentRoom].items.length; i++) {\r\n            let item = game.rooms[this.state.currentRoom].items[i];\r\n            if (item.id === id) {\r\n                game.rooms[this.state.currentRoom].items[i].examined = true;\r\n                return item\r\n            }\r\n            if (item.examined && item.visibleItems) {\r\n                for (let j = 0; j < item.visibleItems.length; j++) {\r\n                    let vi = item.visibleItems[j];\r\n                    if (vi.id === id) {\r\n                        return vi;\r\n                    }\r\n                }\r\n            }\r\n            if (item.searched && item.hiddenItems) {\r\n                for (let j = 0; j < item.hiddenItems.length; j++) {\r\n                    let hi = item.hiddenItems[j];\r\n                    if (hi.id === id) {\r\n                        return hi;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        for (let i = 0; i < this.state.inventory.length; i++) {\r\n            if (this.state.inventory[i].id === id) {\r\n                return this.state.inventory[i]\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    addToInventory(item) {\r\n        this.setState(function (prevState) {\r\n            prevState.inventory.push(item);\r\n            return prevState\r\n        })\r\n    }\r\n    removeItemFromRoom(id) {\r\n        console.log(`Removing ${id}`)\r\n        for (let i = 0; i < game.rooms[this.state.currentRoom].items.length; i++) {\r\n            if (game.rooms[this.state.currentRoom].items[i].id === id) {\r\n                game.rooms[this.state.currentRoom].items.splice(i, 1)\r\n                return;\r\n            }\r\n            console.log(game.rooms[this.state.currentRoom].items[i])\r\n            if (game.rooms[this.state.currentRoom].items[i].visibleItems) {\r\n                for (let j = 0; j < game.rooms[this.state.currentRoom].items[i].visibleItems.length; j++) {\r\n                    if (game.rooms[this.state.currentRoom].items[i].visibleItems[j].id === id) {\r\n                        game.rooms[this.state.currentRoom].items[i].visibleItems.splice(j, 1)\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (game.rooms[this.state.currentRoom].items[i].hiddenItems) {\r\n                for (let j = 0; j < game.rooms[this.state.currentRoom].items[i].hiddenItems.length; j++) {\r\n                    if (game.rooms[this.state.currentRoom].items[i].hiddenItems[j].id === id) {\r\n                        game.rooms[this.state.currentRoom].items[i].hiddenItems.splice(j, 1)\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return;\r\n    }\r\n    handleChange(e) {\r\n        this.setState({\r\n            input: e.target.value\r\n        })\r\n    }\r\n\r\n    detectSubmit(e) {\r\n        if (e.key === 'Enter') {\r\n            this.handleInput()\r\n        }\r\n        if (e.keyCode === 38) {\r\n            this.setState({ input: this.state.prevInput })\r\n            e.preventDefault()\r\n        }\r\n    }\r\n\r\n    addOutput(msg) {\r\n        this.setState(function (prevState) {\r\n            prevState.outputs.push(msg);\r\n            return prevState;\r\n        }, () => {\r\n            let outputEl = this.outputRef.current;\r\n            outputEl.scrollTo({\r\n                top: outputEl.scrollHeight,\r\n                behavior: 'smooth'\r\n            });\r\n        })\r\n    }\r\n\r\n    resolveSynonyms(word) {\r\n        for (let i = 0; i < game.synonyms.length; i++) {\r\n            for (let j = 0; j < game.synonyms[i].match.length; j++) {\r\n                if (game.synonyms[i].match[j] === word) {\r\n                    return game.synonyms[i].term;\r\n                }\r\n            }\r\n        }\r\n        return word;\r\n    }\r\n\r\n    resolveDescription(item) {\r\n        let d = item.description;\r\n        if (d.includes('$visibleItems')) {\r\n            let visibleItems = util.joinEnglish(item.visibleItems, 'listName')\r\n            d = d.replace('$visibleItems', visibleItems)\r\n        }\r\n\r\n        return d;\r\n    }\r\n\r\n    getMessage(msg, insertWord = '') {\r\n        if (game.messages[msg]) {\r\n            let message = game.messages[msg][util.gri(0, game.messages[msg].length - 1)]\r\n            message = message.replace('%', insertWord)\r\n            return message\r\n        }\r\n    }\r\n\r\n    isDirectionValid(direction) {\r\n        if (this.getNodeByID(this.state.currentRoom)[direction]) {\r\n            return true\r\n        }\r\n        return false;\r\n    }\r\n\r\n    handleInput(s) {\r\n        if (!s) {\r\n            this.setState({ prevInput: this.state.input })\r\n            s = this.state.input.replace('at ', '')\r\n            s = s.replace('through ', '')\r\n            s = s.replace('to ', '')\r\n            s = s.toLocaleLowerCase()\r\n\r\n            this.setState(function (prevState) {\r\n                prevState.outputs.push('> ' + this.state.input);\r\n                return prevState;\r\n            })\r\n        }\r\n        let command = []\r\n        let words = s.split(' ');\r\n        for (let i = 0; i < words.length; i++) {\r\n            command.push(this.resolveSynonyms(words[i]))\r\n        }\r\n        console.log(command)\r\n        let verb = command[0];\r\n        let noun = command[1];\r\n        let currentNode = this.getNodeByID(this.state.currentRoom);\r\n\r\n\r\n        this.setState({ input: '' })\r\n        if (command.length === 1) {\r\n            noun = this.resolveSynonyms(command[0])\r\n            if (noun === 'north' || noun === 'south' || noun === 'east' || noun === 'west' || noun === 'back' || this.isDirectionValid(noun)) {\r\n                verb = 'go'\r\n            } else if (noun === 'inventory') {\r\n                verb = 'examine'\r\n            }\r\n            else if (noun === 'help') {\r\n                this.addOutput(this.getMessage('help'))\r\n                return;\r\n            }\r\n            else if (noun === 'examine') {\r\n                verb = 'examine';\r\n                noun = 'around';\r\n            }\r\n            else if (noun === 'go') {\r\n                this.addOutput(this.getMessage('giveCompass'))\r\n                return;\r\n            } else if (this.getItemByID(noun)) {\r\n                verb = 'examine'\r\n            } else if (noun === 'reset'){\r\n                window.location.reload()\r\n            }\r\n        }\r\n        if (verb === 'use') {\r\n            console.log('In use flow')\r\n            let itemExists = this.getItemByID(noun)\r\n            console.log(itemExists)\r\n            if ((command[2] === 'with' || command[2] === 'on') && itemExists) {\r\n                let target = this.getItemByID(command[3]);\r\n                target = this.resolveSynonyms(target)\r\n                if (target && target.interactions && target.interactions[noun]) {\r\n                    this.addOutput(target.interactions[noun].message);\r\n                    //TODO: Make this dynamicly controlled from game.json\r\n                    game.graph = actions.unlockStoreDoor(game.graph);\r\n                    return;\r\n                } else if (target) {\r\n                    this.addOutput(this.getMessage('itemDidntWork'))\r\n                    return;\r\n                } else {\r\n                    this.addOutput(this.getMessage('noSuchThing'))\r\n                    return;\r\n                }\r\n            } else if (itemExists) {\r\n                this.addOutput(this.getMessage('giveTarget', command[1]))\r\n                return;\r\n            } else {\r\n                this.addOutput(this.getMessage('noSuchThing'))\r\n                return;\r\n            }\r\n        }\r\n        if (verb === 'go') {\r\n            // noun is a direction here\r\n            noun = this.resolveAlternateTriggers(currentNode, noun)\r\n\r\n            if (noun === 'shelf') {\r\n                if (command[2]) {\r\n                    noun = `shelf-${command[2]}`\r\n                } else {\r\n                    noun = `shelf-1`\r\n                    this.addOutput('(You walk up to Shelf 1)')\r\n                }\r\n            }\r\n\r\n            if (currentNode[noun] && currentNode[noun].locked !== true) {\r\n                let nextRoom = currentNode[noun].node;\r\n                this.setState(function (prevState) {\r\n                    prevState.currentRoom = nextRoom;\r\n                    return prevState;\r\n                })\r\n                if (!game.rooms[nextRoom].visited) {\r\n                    this.addOutput(`${game.rooms[nextRoom].title}/n${game.rooms[nextRoom].description}`)\r\n                    game.rooms[nextRoom].visited = true;\r\n                } else if (game.rooms[nextRoom].visited === true) {\r\n                    this.addOutput(game.rooms[nextRoom].title)\r\n                }\r\n            } else if (currentNode[noun] && currentNode[noun].locked === true) {\r\n                this.addOutput(this.getMessage('locked'))\r\n            }\r\n            else {\r\n                this.addOutput(this.getMessage('cantGoThatWay'))\r\n            }\r\n        } else if (verb === 'take') {\r\n            let item = this.getItemByID(noun);\r\n            if (item && item.canTake) {\r\n                this.addOutput('Taken.')\r\n                this.removeItemFromRoom(item.id)\r\n                this.addToInventory(item)\r\n            } else if (item && !item.canTake) {\r\n                this.addOutput(this.getMessage('cantTakeThat'))\r\n            } else if (!item) {\r\n                this.addOutput(this.getMessage('noSuchThing'))\r\n            }\r\n        } else if (verb === 'examine') {\r\n\r\n            // if (noun === 'shelf') {\r\n            //     if (command[2]) {\r\n            //         this.handleInput(`go shelf-${command[2]}`)\r\n            //         return;\r\n            //     } else {\r\n            //         this.addOutput('(You walk up to the first shelf)')\r\n            //         this.handleInput(`go shelf-1`)\r\n            //         return;\r\n            //     }\r\n            // }\r\n\r\n            if (noun === 'inventory') {\r\n                let list = this.state.inventory.map(function (item) {\r\n                    return `— ${item.name}`\r\n                })\r\n                if (list.length > 0) {\r\n                    this.addOutput(`You are carrying:`)\r\n                    let s = '';\r\n                    for (const item in list) {\r\n                        s += `${list[item]}/n`\r\n                    }\r\n                    this.addOutput(s)\r\n                } else {\r\n                    this.addOutput(`Your're not carrying anything.`)\r\n                }\r\n            } else if (noun === 'around') {\r\n                this.addOutput(`${game.rooms[this.state.currentRoom].title}/n${game.rooms[this.state.currentRoom].description}`)\r\n            } else {\r\n                let item = this.getItemByID(noun)\r\n                if (item) {\r\n                    this.addOutput(this.resolveDescription(item))\r\n                } else {\r\n                    this.addOutput(this.getMessage('noSuchThing'))\r\n                }\r\n            }\r\n        } else if (verb === 'search') {\r\n            let item = this.getItemByID(noun)\r\n            if (item) {\r\n                if (item.hiddenItems) {\r\n                    item.searched = true;\r\n                    this.addOutput(item.searchDescription);\r\n                } else {\r\n                    item.searched = true;\r\n                    this.addOutput(this.getMessage('searchFailed'))\r\n                }\r\n            } else {\r\n                this.addOutput(this.getMessage('noSuchThing'))\r\n            }\r\n        } else {\r\n            this.setState(function (prevState) {\r\n                prevState.failedCommandCount++\r\n                return prevState;\r\n            })\r\n            if (this.state.failedCommandCount > 2) {\r\n                this.addOutput(this.getMessage('didntUnderstand'))\r\n                this.addOutput(this.getMessage('hint'))\r\n                this.setState({ failedCommandCount: 0 })\r\n            } else {\r\n                this.addOutput(this.getMessage('didntUnderstand'))\r\n            }\r\n        }\r\n\r\n        this.setState((prevState) => {\r\n            prevState.moves++;\r\n            return prevState;\r\n        })\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        const outputItems = this.state.outputs.map(function (msg, index) {\r\n            let paragraphs = msg.split('/n');\r\n            const ps = paragraphs.map(function (p, index) {\r\n                return <p>{p}</p>\r\n            })\r\n            return <li key={index}>{ps}</li>\r\n        });\r\n\r\n        return (\r\n            <div className='game'>\r\n                <header className='game--header'>\r\n                    <div className=\"game--status\">\r\n                        {game.rooms[this.state.currentRoom].title}\r\n                    </div>\r\n                    <div className=\"game--status\">\r\n                        Moves: {this.state.moves}\r\n                    </div>\r\n                </header>\r\n                <div className='game--output' ref={this.outputRef}>\r\n                    <ul>\r\n                        {outputItems}\r\n                    </ul>\r\n                </div>\r\n                <div className='game--controls'>\r\n                    <input ref={this.inputRef} onKeyPress={this.detectSubmit} value={this.state.input} onChange={this.handleChange} className='controls--field'></input>\r\n                    <button onClick={this.handleInput} className='controls--button'>Enter</button>\r\n                </div>\r\n                {/* <Map graph={game.graph}></Map> */}\r\n            </div>\r\n\r\n        )\r\n    }\r\n\r\n}","import React from 'react';\nimport Game from './Game.js';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Game></Game>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}