{"version":3,"sources":["util.js","Game.js","App.js","serviceWorker.js","index.js"],"names":["min","max","Math","floor","random","i","game","graph","push","id","back","node","west","console","dir","fillStores","Game","props","state","input","prevInput","currentRoom","outputs","inventory","initialInventory","outputRef","React","createRef","inputRef","handleInput","bind","handleChange","detectSubmit","addOutput","getItemByID","this","current","focus","length","warn","rooms","items","item","setState","prevState","e","target","value","key","keyCode","preventDefault","msg","outputEl","scrollTop","scrollHeight","word","synonyms","j","match","term","messages","util","command","split","verb","resolveSynonyms","noun","currentNode","getNodeByID","nextRoom","description","cantGoThatWay","canTake","addToInventory","getMessage","list","map","name","index","shelves","log","outputItems","className","title","ref","onKeyPress","onChange","onClick","Component","App","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ab90ae7f.chunk.js","sourcesContent":["export default {\r\n    gri: function (min, max) {\r\n        return Math.floor(Math.random() * (max - min + 1)) + min;\r\n    }\r\n}","import React from 'react'\r\nimport game from './game.json'\r\nimport util from './util.js'\r\nimport './Game.css'\r\n\r\nfunction fillStores(){\r\n    for (let i = 0; i < 14; i++){\r\n        game.graph.push({\r\n            id: `store1-shelf${i+1}`,\r\n            back: {node: 'store1'},\r\n            west: {node: 'corridor1'}\r\n        })\r\n    }\r\n    console.dir(game.graph)\r\n}\r\n\r\nfillStores()\r\n\r\nexport default class Game extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            input: '',\r\n            prevInput: '',\r\n            currentRoom: 'entrance',\r\n            outputs: [],\r\n            inventory: game.initialInventory\r\n        }\r\n\r\n        this.outputRef = React.createRef()\r\n        this.inputRef = React.createRef()\r\n\r\n        this.handleInput = this.handleInput.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.detectSubmit = this.detectSubmit.bind(this)\r\n        this.addOutput = this.addOutput.bind(this)\r\n        this.getItemByID = this.getItemByID.bind(this)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.inputRef.current.focus();\r\n        this.addOutput('You are the archivist. Find TGA431.')\r\n    }\r\n\r\n    getNodeByID(id) {\r\n        for (let i = 0; i < game.graph.length; i++) {\r\n            if (game.graph[i].id === id) { return game.graph[i] }\r\n        }\r\n        console.warn(`Couldn't find node with ID \"${id}\"`)\r\n    }\r\n\r\n    getItemByID(id) {\r\n        for (let i = 0; i < game.rooms[this.state.currentRoom].items.length; i++) {\r\n            if (game.rooms[this.state.currentRoom].items[i].id === id) {\r\n                return game.rooms[this.state.currentRoom].items[i]\r\n            }\r\n        }\r\n        for (let i = 0; i < this.state.inventory.length; i++) {\r\n            if (this.state.inventory[i].id === id) {\r\n                return this.state.inventory[i]\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    addToInventory(item) {\r\n        this.setState(function (prevState) {\r\n            prevState.inventory.push(item);\r\n            return prevState\r\n        })\r\n    }\r\n    handleChange(e) {\r\n        this.setState({\r\n            input: e.target.value\r\n        })\r\n    }\r\n\r\n    detectSubmit(e) {\r\n        if (e.key === 'Enter') {\r\n            this.handleInput()\r\n        }\r\n        if (e.keyCode === 38) {\r\n            this.setState({ input: this.state.prevInput })\r\n            e.preventDefault()\r\n        }\r\n    }\r\n\r\n    addOutput(msg) {\r\n        this.setState(function (prevState) {\r\n            prevState.outputs.push(msg);\r\n            return prevState;\r\n        }, () => {\r\n            let outputEl = this.outputRef.current;\r\n            outputEl.scrollTop = outputEl.scrollHeight;\r\n        })\r\n    }\r\n\r\n    resolveSynonyms(word) {\r\n        for (let i = 0; i < game.synonyms.length; i++) {\r\n            for (let j = 0; j < game.synonyms[i].match.length; j++) {\r\n                if (game.synonyms[i].match[j] === word) {\r\n                    return game.synonyms[i].term;\r\n                }\r\n            }\r\n        }\r\n        return word;\r\n    }\r\n\r\n    getMessage(msg) {\r\n        if (game.messages[msg]) {\r\n            return game.messages[msg][util.gri(0, game.messages[msg].length - 1)]\r\n        }\r\n    }\r\n\r\n    handleInput() {\r\n        this.setState({ prevInput: this.state.input })\r\n        let command = this.state.input.split(' ')\r\n\r\n        let verb = this.resolveSynonyms(command[0]);\r\n        let noun = this.resolveSynonyms(command[1]);\r\n        let currentNode = this.getNodeByID(this.state.currentRoom);\r\n\r\n        this.setState(function (prevState) {\r\n            prevState.outputs.push('> ' + this.state.input);\r\n            return prevState;\r\n        })\r\n        this.setState({ input: '' })\r\n        if (command.length === 1) {\r\n            noun = this.resolveSynonyms(command[0])\r\n            if (noun === 'north' || noun === 'south' || noun === 'east' || noun === 'west') {\r\n                verb = 'go'\r\n            } else if (noun === 'inventory') {\r\n                verb = 'examine'\r\n            }\r\n        }\r\n\r\n        if (verb === 'go') {\r\n            // noun is a direction here\r\n            if (currentNode[noun]) {\r\n                let nextRoom = currentNode[noun].node;\r\n                this.setState(function (prevState) {\r\n                    prevState.currentRoom = nextRoom;\r\n                    return prevState;\r\n                })\r\n                this.addOutput(game.rooms[nextRoom].description)\r\n            } else {\r\n                this.addOutput(game.messages.cantGoThatWay[0])\r\n            }\r\n        } else if (verb === 'take') {\r\n            let item = this.getItemByID(noun);\r\n            if (item && item.canTake) {\r\n                this.addOutput('Taken.')\r\n                this.addToInventory(item)\r\n            } if (item && !item.canTake){\r\n                this.addOutput(this.getMessage('cantTakeThat'))\r\n            } else {\r\n                this.addOutput(this.getMessage('noSuchThing'))\r\n            }\r\n        } else if (verb === 'examine') {\r\n            if (noun === 'inventory') {\r\n                let list = this.state.inventory.map(function (item) {\r\n                    return `— ${item.name}`\r\n                })\r\n                if (list.length > 0) {\r\n                    this.addOutput(`You are carrying:`)\r\n                    for (const item in list) {\r\n                        this.addOutput(list[item])\r\n                    }\r\n                } else {\r\n                    this.addOutput(`Your're not carrying anything.`)\r\n                }\r\n            } else if (noun === 'around') {\r\n                this.addOutput(game.rooms[this.state.currentRoom].description)\r\n            } else if (noun === 'shelf' && this.getItemByID('shelves')){\r\n                let item = this.getItemByID('shelves')\r\n                let index = command[2];\r\n                this.addOutput(item.shelves[index].description)\r\n            } else {\r\n                let item = this.getItemByID(noun)\r\n                console.log(item)\r\n                if (item) {\r\n                    this.addOutput(item.description)\r\n                } else {\r\n                    this.addOutput(this.getMessage('noSuchThing'))\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        const outputItems = this.state.outputs.map((msg, index) =>\r\n            <li key={index}>{msg}</li>\r\n        );\r\n\r\n        return (\r\n            <div className='game'>\r\n                <div className=\"game--status\">{game.rooms[this.state.currentRoom].title}</div>\r\n                <div className='game--output' ref={this.outputRef}>\r\n                    <ul>\r\n                        {outputItems}\r\n                    </ul>\r\n                </div>\r\n                <div className='game--controls'>\r\n                    <input ref={this.inputRef} onKeyPress={this.detectSubmit} value={this.state.input} onChange={this.handleChange} className='controls--field'></input>\r\n                    <button onClick={this.handleInput} className='controls--button'>Enter</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}","import React from 'react';\r\nimport Game from './Game.js';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Game></Game>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}